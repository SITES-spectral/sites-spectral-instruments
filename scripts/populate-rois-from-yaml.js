#!/usr/bin/env node

/**
 * SITES Spectral ROI Data Population Script
 *
 * This script reads ROI data from stations.yaml and populates the instrument_rois table
 * in the database. It handles the complete ROI data structure including points, colors,
 * and metadata.
 */

const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');

// Configuration
const CONFIG = {
    stationsYamlPath: path.join(__dirname, '..', '.secure', 'stations.yaml'),
    logLevel: 'info' // 'debug', 'info', 'warn', 'error'
};

// Logger
const logger = {
    debug: (msg) => CONFIG.logLevel === 'debug' && console.log(`[DEBUG] ${msg}`),
    info: (msg) => ['debug', 'info'].includes(CONFIG.logLevel) && console.log(`[INFO] ${msg}`),
    warn: (msg) => ['debug', 'info', 'warn'].includes(CONFIG.logLevel) && console.warn(`[WARN] ${msg}`),
    error: (msg) => console.error(`[ERROR] ${msg}`)
};

/**
 * Load and parse stations.yaml file
 */
function loadStationsData() {
    try {
        const yamlContent = fs.readFileSync(CONFIG.stationsYamlPath, 'utf8');
        const data = yaml.load(yamlContent);
        logger.debug(`Loaded stations.yaml with ${Object.keys(data.stations).length} stations`);
        return data;
    } catch (error) {
        logger.error(`Failed to load stations.yaml: ${error.message}`);
        process.exit(1);
    }
}

/**
 * Extract ROI data from stations YAML structure
 */
function extractROIData(stationsData) {
    const roiData = [];

    Object.entries(stationsData.stations).forEach(([stationKey, station]) => {
        if (station.platforms) {
            Object.entries(station.platforms).forEach(([platformKey, platform]) => {
                if (platform.instruments && platform.instruments.phenocams) {
                    Object.entries(platform.instruments.phenocams).forEach(([instrumentKey, instrument]) => {
                        if (instrument.rois) {
                            logger.debug(`Processing ROIs for instrument: ${instrument.normalized_name || instrumentKey}`);
                            Object.entries(instrument.rois).forEach(([roiKey, roi]) => {
                                // Skip if roi is null or undefined
                                if (!roi) {
                                    logger.warn(`Skipping null ROI ${roiKey} for instrument ${instrument.normalized_name || instrumentKey}`);
                                    return;
                                }

                                // Skip if instrument has no normalized_name
                                if (!instrument.normalized_name) {
                                    logger.warn(`Skipping ROI ${roiKey} for instrument with missing normalized_name (key: ${instrumentKey})`);
                                    return;
                                }

                                roiData.push({
                                    instrumentNormalizedName: instrument.normalized_name,
                                    roiName: roiKey,
                                    description: roi.description || null,
                                    alpha: roi.alpha || 0.0,
                                    autoGenerated: roi.auto_generated || false,
                                    colorR: roi.color ? roi.color[0] : 255,
                                    colorG: roi.color ? roi.color[1] : 255,
                                    colorB: roi.color ? roi.color[2] : 255,
                                    thickness: roi.thickness || 7,
                                    generatedDate: roi.generated_date || null,
                                    sourceImage: roi.source_image || null,
                                    pointsJson: roi.points ? JSON.stringify(roi.points) : null
                                });
                            });
                        }
                    });
                }
            });
        }
    });

    logger.info(`Extracted ${roiData.length} ROIs from stations.yaml`);
    return roiData;
}

/**
 * Generate SQL INSERT statements
 */
function generateSQL(roiData) {
    if (roiData.length === 0) {
        logger.warn('No ROI data found to generate SQL');
        return '';
    }

    let sql = `-- ROI Data Population from stations.yaml
-- Generated on ${new Date().toISOString()}

-- Clear existing ROI data
DELETE FROM instrument_rois;

-- Insert ROI data
`;

    roiData.forEach((roi, index) => {
        const instrumentQuery = `(SELECT id FROM instruments WHERE normalized_name = '${roi.instrumentNormalizedName}')`;

        sql += `INSERT INTO instrument_rois (
    instrument_id, roi_name, description, alpha, auto_generated,
    color_r, color_g, color_b, thickness, generated_date, source_image, points_json
) VALUES (
    ${instrumentQuery},
    '${roi.roiName}',
    ${roi.description ? `'${roi.description.replace(/'/g, "''")}'` : 'NULL'},
    ${roi.alpha},
    ${roi.autoGenerated ? 1 : 0},
    ${roi.colorR},
    ${roi.colorG},
    ${roi.colorB},
    ${roi.thickness},
    ${roi.generatedDate ? `'${roi.generatedDate}'` : 'NULL'},
    ${roi.sourceImage ? `'${roi.sourceImage}'` : 'NULL'},
    ${roi.pointsJson ? `'${roi.pointsJson.replace(/'/g, "''")}'` : 'NULL'}
);

`;
    });

    return sql;
}

/**
 * Main execution function
 */
function main() {
    logger.info('SITES Spectral ROI Data Population');
    logger.info('===================================');

    // Load stations data
    const stationsData = loadStationsData();

    // Extract ROI data
    const roiData = extractROIData(stationsData);

    if (roiData.length === 0) {
        logger.warn('No ROI data found in stations.yaml');
        return;
    }

    // Generate SQL
    const sql = generateSQL(roiData);

    // Write SQL to file
    const outputPath = path.join(__dirname, '..', 'migrations', 'populate_rois_data.sql');

    try {
        fs.writeFileSync(outputPath, sql);
        logger.info(`Generated SQL file: ${outputPath}`);
        logger.info(`Total ROIs: ${roiData.length}`);

        // Show breakdown by instrument
        const breakdown = {};
        roiData.forEach(roi => {
            if (!breakdown[roi.instrumentNormalizedName]) {
                breakdown[roi.instrumentNormalizedName] = 0;
            }
            breakdown[roi.instrumentNormalizedName]++;
        });

        logger.info('\nROI breakdown by instrument:');
        Object.entries(breakdown).forEach(([instrument, count]) => {
            logger.info(`  ${instrument}: ${count} ROIs`);
        });

        logger.info(`\nTo apply this data to your database, run:`);
        logger.info(`CLOUDFLARE_ACCOUNT_ID=e5f93ed83288202d33cf9c7b18068f64 npx wrangler d1 execute spectral_stations_db --remote --file=${outputPath}`);

    } catch (error) {
        logger.error(`Failed to write SQL file: ${error.message}`);
        process.exit(1);
    }
}

// Execute if called directly
if (require.main === module) {
    main();
}

module.exports = { main, extractROIData };